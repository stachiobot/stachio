generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model SupportGuilds {
  guildId    String       @unique
  guildName  String
  language   String       @default("en-US")
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  StaffUsers StaffUsers[]
}

model GuildConfig {
  guildId            String          @unique
  guildName          String?
  language           String          @default("en-US")
  broadcastChannelId String?
  errorLogChannelId  String?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  WatchdogConfig     WatchdogConfig?

  // üîë Premium fields
  premiumTier         PremiumTier @default(Free)
  premiumExpiresAt    DateTime?
  redeemedPremiumCode String?

  // ‚¨á Blacklist check usage tracking
  blacklistCheckUsage     Int          @default(0)
  blacklistCheckLastReset DateTime     @default(now())
  Appeal                  Appeal[]
}

model PremiumCode {
  code      String      @id @default(cuid())
  tier      PremiumTier
  duration  Int // In days
  createdAt DateTime    @default(now())
  redeemed  Boolean     @default(false)
}

enum PremiumTier {
  Free
  Silver
  Gold
  Platinum
}

model WatchdogConfig {
  id      Int         @id @default(autoincrement())
  guildId String      @unique
  guild   GuildConfig @relation(fields: [guildId], references: [guildId])

  generalPunishment     PunishmentType @default(WARN)
  fivemPunishment       PunishmentType @default(WARN)
  discordPunishment     PunishmentType @default(WARN)
  robloxPunishment      PunishmentType @default(WARN)
  otherGamePunishment   PunishmentType @default(WARN)
  marketplacePunishment PunishmentType @default(WARN)

  logChannelId String?
  roleId       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PunishmentType {
  NONE
  WARN
  ROLE
  KICK
  BAN
}

model BlacklistedUser {
  id        Int    @id @default(autoincrement())
  discordId String @unique
  username  String

  blacklists BlacklistEntry[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BlacklistEntry {
  id     Int             @id @default(autoincrement())
  user   BlacklistedUser @relation(fields: [userId], references: [id])
  userId Int

  usertype   UserType        @default(General)
  status     BlacklistStatus @default(PERMANENT)
  community  String?
  reason     String?
  reportedBy String?
  evidence   String?         @db.LongText

  active    Boolean   @default(true)
  expiresAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum UserType {
  General
  FiveM
  Roblox
  OtherGame
  Marketplace
  Scammer
  Impersonator
  Advertiser
  Phisher
  DataLeaker
  ExploitAbuser
  Cheater
  DeveloperAbuse
  ToxicBehavior
  AltAccount
  Chargebacker
  FraudulentSeller
  ExploitDeveloper
  DDoSer
  ServerRaider
  NSFWDistributor
  AccountSeller
}

enum BlacklistStatus {
  PERMANENT
  TEMPORARY
  INDEFINITE
}

model StaffUsers {
  id       Int        @id @default(autoincrement())
  guildId  String
  userId   String
  username String?
  role     StaffRoles @default(Trial_Moderator)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  guild SupportGuilds @relation(fields: [guildId], references: [guildId])
}

enum StaffRoles {
  Owner
  Senior_Administrator
  Administrator
  Senior_Moderator
  Moderator
  Trial_Moderator
  Retired
}

model Report {
  id               Int          @id @default(autoincrement())
  reporterId       String
  reporterUsername String
  reportedUser     String
  reason           String
  evidence         String?
  channelId        String?      @unique
  status           ReportStatus @default(OPEN)
  closedBy         String?
  closedReason     String?
  closedAt         DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ReportStatus {
  OPEN
  CLOSED
}

/// üèÜ REPUTATION / TRUST SCORE SYSTEM
model UserReputation {
  id         Int      @id @default(autoincrement())
  userId     String   @unique
  username   String?
  trustScore Int      @default(100) // 0-100 baseline
  strikes    Int      @default(0)
  positive   Int      @default(0)
  negative   Int      @default(0)
  notes      String?  @db.LongText
  updatedAt  DateTime @updatedAt
  createdAt  DateTime @default(now())
}

/// üßæ APPEAL SYSTEM
model Appeal {
  id         Int          @id @default(autoincrement())
  userId     String
  username   String?
  guildId    String?
  caseId     Int?
  reason     String
  evidence   String?      @db.LongText
  status     AppealStatus @default(PENDING)
  reviewedBy String?
  reviewedAt DateTime?
  response   String?      @db.LongText
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  guild GuildConfig? @relation(fields: [guildId], references: [guildId], onDelete: Cascade)
}

enum AppealStatus {
  PENDING
  APPROVED
  DENIED
}
